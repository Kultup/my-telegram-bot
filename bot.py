import os
import sys
import ctypes
import time
import subprocess
import psutil
import pyautogui
import tkinter as tk
from tkinter import ttk
from threading import Thread
from youtubesearchpython import VideosSearch
import yt_dlp
import pystray
from PIL import Image, ImageDraw, ImageTk
import telebot
import logging
from datetime import datetime
import json
import platform
import uuid

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
last_message_id = None
last_chat_id = None

# –ü—É—Ç—å –¥–æ GIF-–∞–Ω–∏–º–∞—Ü–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏
LOADING_GIF_PATH = "C:\\Users\\dpytlyk-da\\Desktop\\bot\\loading.gif"
LOADING_GIF_FRAMES = 60  # –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–¥—Ä–æ–≤ –≤ –≤–∞—à–µ–º GIF

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
def is_admin():
    try:
        return ctypes.windll.shell32.IsUserAnAdmin()
    except AttributeError:  # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ Windows
        return False

# –ï—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ —Å –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
def run_as_admin(action):
    if is_admin():
        action()
    else:
        try:
            ctypes.windll.shell32.ShellExecuteW(None, "runas", sys.executable, ' '.join(sys.argv), None, 1)
            sys.exit()
        except:
            print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —Å –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤—Ä—É—á–Ω—É—é.")

# –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø—É—Ç–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_folder = os.path.join(os.getenv('APPDATA'), 'Assistant', f"{os.getenv('USERNAME')}_{datetime.now().strftime('%Y%m%d_%H%M%S')}")
log_file = os.path.join(user_folder, 'bot.log')
config_path = os.path.join(os.path.dirname(__file__), 'config.json')
mac_address_file = os.path.join(user_folder, 'mac_address.txt')

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
if not os.path.exists(user_folder):
    os.makedirs(user_folder)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(filename=log_file, level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s', encoding='utf-8')

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è MAC-–∞–¥—Ä–µ—Å–∞
def get_mac_address():
    return ':'.join(['{:02x}'.format((uuid.getnode() >> elements) & 0xff) for elements in range(0, 2*6, 2)][::-1])

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ MAC-–∞–¥—Ä–µ—Å—É
def check_mac_address():
    current_mac = get_mac_address()
    if os.path.exists(mac_address_file):
        with open(mac_address_file, 'r') as f:
            saved_mac = f.read().strip()
            if current_mac != saved_mac:
                print(f"‚ö†Ô∏è MAC-–∞–¥—Ä–µ—Å –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω —Å {saved_mac} –Ω–∞ {current_mac}. –û–±–Ω–æ–≤–ª—è—é –ø—Ä–∏–≤—è–∑–∫—É.")
                with open(mac_address_file, 'w') as f:
                    f.write(current_mac)
                logging.info(f"–ü—Ä–∏–≤—è–∑–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞. –ù–æ–≤—ã–π MAC-–∞–¥—Ä–µ—Å: {current_mac}")
    else:
        # –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π MAC-–∞–¥—Ä–µ—Å
        with open(mac_address_file, 'w') as f:
            f.write(current_mac)
        print(f"–ü—Ä–∏–≤—è–∑–∫–∞ –∫ –ü–ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∞. MAC-–∞–¥—Ä–µ—Å: {current_mac}")
        logging.info(f"–ü—Ä–∏–≤—è–∑–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞. MAC-–∞–¥—Ä–µ—Å: {current_mac}")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–∏–≤—è–∑–∫—É –∫ MAC-–∞–¥—Ä–µ—Å—É
check_mac_address()

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ config.json
if not os.path.exists(config_path):
    # –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ —Å –Ω–∞—á–∞–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
    default_config = {
        "telegram_bot_token": "",
        "youtube_api_key": "",
        "google_cse_api_key": "",
        "google_cse_cx": "",
        "api_id": "",
        "api_hash": "",
        "openai_api_key": "",
        "openai_api_url": ""
    }
    with open(config_path, 'w', encoding='utf-8') as config_file:
        json.dump(default_config, config_file, indent=4)

with open(config_path, 'r', encoding='utf-8') as config_file:
    config = json.load(config_file)

# –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º
TELEGRAM_BOT_TOKEN = config.get("telegram_bot_token", "YOUR_TELEGRAM_BOT_TOKEN")
YOUTUBE_API_KEY = config.get("youtube_api_key", "YOUR_YOUTUBE_API_KEY")
GOOGLE_CSE_API_KEY = config.get("google_cse_api_key", "YOUR_GOOGLE_CSE_API_KEY")
GOOGLE_CSE_CX = config.get("google_cse_cx", "YOUR_GOOGLE_CSE_CX")
api_id = config.get("api_id", 123456)
api_hash = config.get("api_hash", "YOUR_API_HASH")
API_KEY = config.get("openai_api_key", "YOUR_OPENAI_API_KEY")
api_url = config.get("openai_api_url", "https://api.openai.com/v1/chat/completions")

bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ FFMPEG –≤ PATH
def is_ffmpeg_installed():
    try:
        subprocess.run(["ffmpeg", "-version"], check=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        return True
    except FileNotFoundError:
        return False

# –ü—É—Ç—å –¥–æ ffmpeg
if is_ffmpeg_installed():
    FFMPEG_PATH = 'ffmpeg'  # –ï—Å–ª–∏ FFMPEG –¥–æ—Å—Ç—É–ø–µ–Ω –≤ PATH
else:
    FFMPEG_PATH = os.path.join(os.path.dirname(__file__), 'external_tools', 'ffmpeg', 'bin', 'ffmpeg.exe')

# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É—Ç–∏ –¥–æ –ø–∞–ø–∫–∏ "–ú—É–∑—ã–∫–∞ —Å –±–æ—Ç–∞" –Ω–∞ —Ä–∞–±–æ—á–µ–º —Å—Ç–æ–ª–µ
def get_music_folder():
    desktop = os.path.join(os.path.join(os.environ['USERPROFILE']), 'Desktop')
    music_folder = os.path.join(desktop, "–ú—É–∑—ã–∫–∞ —Å –±–æ—Ç–∞")
    if not os.path.exists(music_folder):
        os.makedirs(music_folder)
    return music_folder

def send_or_edit_message(chat_id, text, message_id=None, reply_markup=None):
    try:
        if message_id is None:
            message = bot.send_message(chat_id, text, reply_markup=reply_markup)
            return message.message_id
        else:
            # –£–±–∏—Ä–∞–µ–º –≤—ã–∑–æ–≤ bot.get_message –∏ –ø—Ä–æ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            bot.edit_message_text(text, chat_id, message_id, reply_markup=reply_markup)
            return message_id
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
        return None


def download_video_1080p(message):
    global last_message_id, last_chat_id
    url = message.text
    chat_id = message.chat.id
    last_chat_id = chat_id  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —á–∞—Ç–∞ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è

    try:
        send_loading_gif(chat_id)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º GIF

        ydl_opts = {
            'format': 'bestvideo[height<=1080]+bestaudio/best',
            'outtmpl': os.path.join(get_music_folder(), '%(title)s.%(ext)s'),
            'retries': 5,
            'noplaylist': True,  # –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ –≤–∏–¥–µ–æ, –∞ –Ω–µ –ø–ª–µ–π–ª–∏—Å—Ç
            'merge_output_format': 'mp4',  # –ï—Å–ª–∏ FFmpeg —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, —ç—Ç–∞ —Å—Ç—Ä–æ–∫–∞ –±—É–¥–µ—Ç –ø–æ–ª–µ–∑–Ω–∞
            'ffmpeg_location': 'C:/ffmpeg/bin/ffmpeg.exe',  # –£–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Ç—å –¥–æ ffmpeg
        }

        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            ydl.download([url])

        bot.send_message(chat_id, "üéâ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∏–¥–µ–æ: {str(e)}")
        bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∏–¥–µ–æ: {str(e)}")
    finally:
        bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_buttons())

def download_audio_from_link(message):
    global last_message_id
    url = message.text
    chat_id = message.chat.id

    try:
        send_loading_gif(chat_id)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º GIF

        ydl_opts = {
            'format': 'bestaudio[ext=m4a]/best',
            'outtmpl': os.path.join(get_music_folder(), '%(title)s.%(ext)s'),
            'postprocessors': [{
                'key': 'FFmpegExtractAudio',
                'preferredcodec': 'mp3',
                'preferredquality': '192',
            }],
            'ffmpeg_location': 'C:/ffmpeg/bin/ffmpeg.exe',  # –£–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Ç—å –¥–æ ffmpeg
            'nopostoverwrites': False,  # –†–∞–∑—Ä–µ—à–∏—Ç—å –ø–µ—Ä–µ–∑–∞–ø–∏—Å—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤
            'noplaylist': True  # –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ –≤–∏–¥–µ–æ, –∞ –Ω–µ –ø–ª–µ–π–ª–∏—Å—Ç
        }

        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info_dict = ydl.extract_info(url, download=True)
            mp3_file = ydl.prepare_filename(info_dict).replace('.webm', '.mp3')

        bot.send_message(chat_id, f'üéâ –ú—É–∑—ã–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {mp3_file}')
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º—É–∑—ã–∫–∏: {str(e)}")
        bot.send_message(chat_id, f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º—É–∑—ã–∫–∏: {str(e)}')
    finally:
        bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_buttons())

def send_loading_gif(chat_id):
    with open(LOADING_GIF_PATH, 'rb') as gif_file:
        message = bot.send_animation(chat_id, gif_file)
    return message.message_id

def get_main_buttons():
    markup = telebot.types.InlineKeyboardMarkup()
    markup.add(
        telebot.types.InlineKeyboardButton("üéµ –í—ñ–¥—Ç–≤–æ—Ä–∏—Ç–∏ –º—É–∑–∏–∫—É", callback_data='play_music'),
        telebot.types.InlineKeyboardButton("üé• –í—ñ–¥—Ç–≤–æ—Ä–∏—Ç–∏ –≤—ñ–¥–µ–æ", callback_data='play_video')
    )
    markup.add(
        telebot.types.InlineKeyboardButton("‚è∏Ô∏è –ü–∞—É–∑–∞", callback_data='pause_media'),
        telebot.types.InlineKeyboardButton("‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏", callback_data='resume_media')
    )
    markup.add(
        telebot.types.InlineKeyboardButton("üîä –†–µ–≥—É–ª—é–≤–∞–Ω–Ω—è –∑–≤—É–∫—É", callback_data='volume_control'),
        telebot.types.InlineKeyboardButton("üíª –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ü–ö", callback_data='pc_info'),
        telebot.types.InlineKeyboardButton("üîã –ü–µ—Ä–µ–≥–ª—è–¥ –±–∞—Ç–∞—Ä–µ—ó", callback_data='battery_info')
    )
    markup.add(
        telebot.types.InlineKeyboardButton("üåê –í—ñ–¥–∫—Ä–∏—Ç–∏ Chrome", callback_data='open_chrome'),
        telebot.types.InlineKeyboardButton("‚ùå –ó–∞–∫—Ä–∏—Ç–∏ Chrome", callback_data='close_chrome')
    )
    markup.add(
        telebot.types.InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è", callback_data='restart'),
        telebot.types.InlineKeyboardButton("üõë –í–∏–º–∫–Ω–µ–Ω–Ω—è", callback_data='shutdown'),
        telebot.types.InlineKeyboardButton("üí§ –°–ø–ª—è—á–∏–π —Ä–µ–∂–∏–º", callback_data='sleep'),
        telebot.types.InlineKeyboardButton("‚è≤Ô∏è –¢–∞–π–º–µ—Ä –Ω–∞ –≤–∏–º–∫–Ω–µ–Ω–Ω—è", callback_data='shutdown_timer')
    )
    markup.add(
        telebot.types.InlineKeyboardButton("‚¨áÔ∏è –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –º—É–∑–∏–∫—É", callback_data='download_music'),
        telebot.types.InlineKeyboardButton("üé• –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –≤—ñ–¥–µ–æ (1080p)", callback_data='download_video_1080p'),
        telebot.types.InlineKeyboardButton("üéµ –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –º—É–∑–∏–∫—É (MP3)", callback_data='download_audio')
    )
    markup.add(
        telebot.types.InlineKeyboardButton("üõë –ó—É–ø–∏–Ω–∏—Ç–∏ –±–æ—Ç–∞", callback_data='stop_bot')
    )
    return markup

# –í—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è –º—É–∑–∏–∫–∏
def play_music(message):
    search_query = message.text
    videos_search = VideosSearch(search_query, limit=1)
    result = videos_search.result()

    if len(result['result']) > 0:
        video_link = f"https://www.youtube.com/watch?v={result['result'][0]['id']}"
        bot.send_message(message.chat.id, f"üéµ –ó–Ω–∞–π–¥–µ–Ω–æ: {result['result'][0]['title']}\n{video_link}")
        logging.info(f"–í—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è –º—É–∑–∏–∫–∏: {video_link}")
        open_in_chrome(video_link)
    else:
        bot.send_message(message.chat.id, "‚ùå –ú—É–∑–∏–∫—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        logging.info(f"–ú—É–∑–∏–∫—É –∑–∞ –∑–∞–ø–∏—Ç–æ–º '{search_query}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

# –í—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—ñ–¥–µ–æ
def play_video(message):
    search_query = message.text
    videos_search = VideosSearch(search_query, limit=1)
    result = videos_search.result()

    if len(result['result']) > 0:
        video_link = f"https://www.youtube.com/watch?v={result['result'][0]['id']}"
        bot.send_message(message.chat.id, f"üé• –ó–Ω–∞–π–¥–µ–Ω–æ: {result['result'][0]['title']}\n{video_link}")
        logging.info(f"–í—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—ñ–¥–µ–æ: {video_link}")
        open_in_chrome(video_link)
    else:
        bot.send_message(message.chat.id, "‚ùå –í—ñ–¥–µ–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        logging.info(f"–í—ñ–¥–µ–æ –∑–∞ –∑–∞–ø–∏—Ç–æ–º '{search_query}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

# –í—ñ–¥–∫—Ä–∏—Ç–∏ –≤ Chrome
def open_in_chrome(url):
    subprocess.run(["start", "chrome", url], shell=True)

# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è —ñ–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫
@bot.callback_query_handler(func=lambda call: True)
def callback_query_handler(call):
    action = call.data
    logging.info(f"–í–∏–∫–ª–∏–∫–∞–Ω–∞ –æ–ø–µ—Ä–∞—Ü—ñ—è: {action}")

    if action == 'play_music':
        msg = bot.send_message(call.message.chat.id, "üéµ –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –º—É–∑–∏–∫–∏:")
        bot.register_next_step_handler(msg, play_music)
    elif action == 'play_video':
        msg = bot.send_message(call.message.chat.id, "üé• –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –≤—ñ–¥–µ–æ:")
        bot.register_next_step_handler(msg, play_video)
    elif action == 'pause_media':
        pyautogui.press('playpause')
        bot.send_message(call.message.chat.id, "‚è∏Ô∏è –í—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–∏–∑—É–ø–∏–Ω–µ–Ω–æ.")
    elif action == 'resume_media':
        pyautogui.press('playpause')
        bot.send_message(call.message.chat.id, "‚ñ∂Ô∏è –í—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–æ.")
    elif action == 'volume_control':
        markup = telebot.types.InlineKeyboardMarkup()
        markup.add(
            telebot.types.InlineKeyboardButton("üîä –ó–±—ñ–ª—å—à–∏—Ç–∏ –≥—É—á–Ω—ñ—Å—Ç—å", callback_data='volume_up_10'),
            telebot.types.InlineKeyboardButton("üîâ –ó–º–µ–Ω—à–∏—Ç–∏ –≥—É—á–Ω—ñ—Å—Ç—å", callback_data='volume_down_10'),
            telebot.types.InlineKeyboardButton("üîá –í–∏–º–∫–Ω—É—Ç–∏ –∑–≤—É–∫", callback_data='mute')
        )
        bot.send_message(call.message.chat.id, "üîä –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –¥–ª—è —Ä–µ–≥—É–ª—é–≤–∞–Ω–Ω—è –∑–≤—É–∫—É:", reply_markup=markup)
    elif action == 'pc_info':
        send_pc_info(call.message)
    elif action == 'battery_info':
        send_battery_info(call.message)
    elif action == 'open_chrome':
        open_chrome(call.message)
    elif action == 'close_chrome':
        close_chrome(call.message)
    elif action == 'restart':
        restart_computer(call.message)
    elif action == 'shutdown':
        shutdown_computer(call.message)
    elif action == 'sleep':
        sleep_computer(call.message)
    elif action == 'shutdown_timer':
        msg = bot.send_message(call.message.chat.id, "‚è≤Ô∏è –í–≤–µ–¥—ñ—Ç—å —á–∞—Å —É —Å–µ–∫—É–Ω–¥–∞—Ö –¥–æ –≤–∏–º–∫–Ω–µ–Ω–Ω—è:")
        bot.register_next_step_handler(msg, set_shutdown_timer)
    elif action == 'stop_bot':
        stop_bot(call.message)
    elif action == 'download_music':
        download_audio_from_link(call.message)
    elif action == 'download_video_1080p':
        msg = bot.send_message(call.message.chat.id, "üé• –í–≤–µ–¥—ñ—Ç—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –≤—ñ–¥–µ–æ –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è (1080p):")
        bot.register_next_step_handler(msg, download_video_1080p)
    elif action == 'download_audio':
        msg = bot.send_message(call.message.chat.id, "üéµ –í–≤–µ–¥—ñ—Ç—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –º—É–∑–∏–∫—É –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è (MP3):")
        bot.register_next_step_handler(msg, download_audio_from_link)
    elif action in ['volume_up_10', 'volume_down_10', 'mute']:
        adjust_volume(call.message, action)

# –†–µ–≥—É–ª—é–≤–∞–Ω–Ω—è –∑–≤—É–∫—É
def adjust_volume(message, action):
    logging.info(f"–†–µ–≥—É–ª—é–≤–∞–Ω–Ω—è –∑–≤—É–∫—É: {action}")
    if action == 'volume_up_10':
        for _ in range(10):
            pyautogui.press('volumeup')
        bot.send_message(message.chat.id, "üîä –ì—É—á–Ω—ñ—Å—Ç—å –∑–±—ñ–ª—å—à–µ–Ω–æ –Ω–∞ 10.")
    elif action == 'volume_down_10':
        for _ in range(10):
            pyautogui.press('volumedown')
        bot.send_message(message.chat.id, "üîâ –ì—É—á–Ω—ñ—Å—Ç—å –∑–º–µ–Ω—à–µ–Ω–æ –Ω–∞ 10.")
    elif action == 'mute':
        pyautogui.press('volumemute')
        bot.send_message(message.chat.id, "üîá –ó–≤—É–∫ –≤–∏–º–∫–Ω–µ–Ω–æ.")
    bot.send_message(message.chat.id, "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=get_main_buttons())

# –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ü–ö
def send_pc_info(message):
    uname = platform.uname()
    boot_time = psutil.boot_time()
    boot_time_str = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime(boot_time))
    cpu_info = f"üíª –ü—Ä–æ—Ü–µ—Å–æ—Ä: {uname.processor}\n–ö—ñ–ª—å–∫—ñ—Å—Ç—å —è–¥–µ—Ä: {psutil.cpu_count(logical=False)}\n" \
               f"–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ—Ç–æ–∫—ñ–≤: {psutil.cpu_count(logical=True)}"
    mem_info = f"–í—Å—å–æ–≥–æ –ø–∞–º'—è—Ç—ñ: {round(psutil.virtual_memory().total / (1024**3), 2)} GB\n" \
               f"–í—ñ–ª—å–Ω–æ: {round(psutil.virtual_memory().available / (1024**3), 2)} GB"
    system_info = f"–°–∏—Å—Ç–µ–º–∞: {uname.system} {uname.release}\n" \
                  f"–í–µ—Ä—Å—ñ—è: {uname.version}\n" \
                  f"–Ü–º'—è —Ö–æ—Å—Ç–∞: {uname.node}\n" \
                  f"–ß–∞—Å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è: {boot_time_str}\n\n" + cpu_info + "\n\n" + mem_info
    bot.send_message(message.chat.id, f"–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Å–∏—Å—Ç–µ–º—É:\n\n{system_info}")
    logging.info(f"–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Å–∏—Å—Ç–µ–º—É –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞: {system_info}")
    bot.send_message(message.chat.id, "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=get_main_buttons())

# –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –±–∞—Ç–∞—Ä–µ—é
def send_battery_info(message):
    battery = psutil.sensors_battery()
    if battery:
        percent = battery.percent
        plugged = "–¢–∞–∫" if battery.power_plugged else "–ù—ñ"
        bot.send_message(message.chat.id, f"üîã –†—ñ–≤–µ–Ω—å –∑–∞—Ä—è–¥—É: {percent}%\n–ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ –º–µ—Ä–µ–∂—ñ: {plugged}")
        logging.info(f"–†—ñ–≤–µ–Ω—å –∑–∞—Ä—è–¥—É: {percent}%, –ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ –º–µ—Ä–µ–∂—ñ: {plugged}")
    else:
        bot.send_message(message.chat.id, "üîã –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –±–∞—Ç–∞—Ä–µ—é –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
        logging.info("–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –±–∞—Ç–∞—Ä–µ—é –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
    bot.send_message(message.chat.id, "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=get_main_buttons())

# –í—ñ–¥–∫—Ä–∏—Ç–∏ –±—Ä–∞—É–∑–µ—Ä Chrome
def open_chrome(message):
    subprocess.run(["start", "chrome"], shell=True)
    bot.send_message(message.chat.id, "–í—ñ–¥–∫—Ä–∏–≤–∞—é Chrome...")
    logging.info("–í—ñ–¥–∫—Ä–∏–≤–∞—é Chrome")
    bot.send_message(message.chat.id, "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=get_main_buttons())

# –ó–∞–∫—Ä–∏—Ç–∏ –±—Ä–∞—É–∑–µ—Ä Chrome
def close_chrome(message):
    subprocess.run(["taskkill", "/IM", "chrome.exe", "/F"], shell=True)
    bot.send_message(message.chat.id, "–ó–∞–∫—Ä–∏–≤–∞—é Chrome...")
    logging.info("–ó–∞–∫—Ä–∏–≤–∞—é Chrome")
    bot.send_message(message.chat.id, "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=get_main_buttons())

# –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–º–ø'—é—Ç–µ—Ä–∞
def restart_computer(message):
    subprocess.run(["shutdown", "/r", "/t", "0"])

# –í–∏–º–∫–Ω–µ–Ω–Ω—è –∫–æ–º–ø'—é—Ç–µ—Ä–∞
def shutdown_computer(message):
    subprocess.run(["shutdown", "/s", "/t", "0"])

# –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—è –∫–æ–º–ø'—é—Ç–µ—Ä–∞ –≤ —Ä–µ–∂–∏–º —Å–Ω—É
def sleep_computer(message):
    subprocess.run(["rundll32.exe", "powrprof.dll,SetSuspendState", "Sleep"])

# –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–∞–π–º–µ—Ä–∞ –Ω–∞ –≤–∏–º–∫–Ω–µ–Ω–Ω—è
def set_shutdown_timer(message):
    time_in_seconds = message.text
    if time_in_seconds.isdigit():
        bot.send_message(message.chat.id, f"‚è≤Ô∏è –ö–æ–º–ø'—é—Ç–µ—Ä –±—É–¥–µ –≤–∏–º–∫–Ω–µ–Ω–æ —á–µ—Ä–µ–∑ {time_in_seconds} —Å–µ–∫—É–Ω–¥.")
        subprocess.run(["shutdown", "/s", "/t", time_in_seconds])
        logging.info(f"–¢–∞–π–º–µ—Ä –Ω–∞ –≤–∏–º–∫–Ω–µ–Ω–Ω—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {time_in_seconds} —Å–µ–∫—É–Ω–¥")
    else:
        bot.send_message(message.chat.id, "‚è≤Ô∏è –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ.")
        logging.warning(f"–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è —Ç–∞–π–º–µ—Ä–∞: {time_in_seconds}")

# –ó—É–ø–∏–Ω–∫–∞ –±–æ—Ç–∞
def stop_bot(message):
    bot.send_message(message.chat.id, "üõë –ó—É–ø–∏–Ω–∫–∞ –±–æ—Ç–∞")
    bot.stop_polling()
    sys.exit()  # –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –ø—Ä–æ—Ü–µ—Å—É

# –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –±–∞—Ç–∞—Ä–µ—ó —Ç–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
def monitor_system():
    global last_message_id
    while True:
        battery = psutil.sensors_battery()
        if battery:
            percent = battery.percent
            if percent <= 20 and not battery.power_plugged:
                if last_chat_id:
                    bot.send_message(last_chat_id, f"‚ö†Ô∏è –ù–∏–∑—å–∫–∏–π —Ä—ñ–≤–µ–Ω—å –∑–∞—Ä—è–¥—É –±–∞—Ç–∞—Ä–µ—ó: {percent}%")
                logging.warning(f"–ù–∏–∑—å–∫–∏–π —Ä—ñ–≤–µ–Ω—å –∑–∞—Ä—è–¥—É –±–∞—Ç–∞—Ä–µ—ó: {percent}%")
        time.sleep(600)  # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–∂–Ω—ñ 10 —Ö–≤–∏–ª–∏–Ω

# GUI –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –±–æ—Ç–æ–º
def create_gui():
    root = tk.Tk()
    root.title(f"–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è Telegram –±–æ—Ç–æ–º")
    root.geometry("300x400")
    root.configure(bg="#f0f0f0")  # –°–≤—ñ—Ç–ª–æ-—Å—ñ—Ä–∏–π —Ñ–æ–Ω

    # –°—Ç–∏–ª—å –¥–ª—è –∫–Ω–æ–ø–æ–∫
    button_style = {
        "font": ("Helvetica", 12),
        "bg": "#007acc",  # –ö–æ–ª—ñ—Ä –∫–Ω–æ–ø–æ–∫ - —Å–∏–Ω—ñ–π
        "fg": "white",
        "activebackground": "#005fa3",  # –ö–æ–ª—ñ—Ä –ø—Ä–∏ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—ñ - —Ç–µ–º–Ω–æ-—Å–∏–Ω—ñ–π
        "relief": tk.RAISED,
        "bd": 3,
        "highlightthickness": 0
    }

    def start_bot():
        logging.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞")
        Thread(target=bot.polling).start()
        Thread(target=monitor_system).start()

    def stop_bot():
        logging.info("–ó—É–ø–∏–Ω–∫–∞ –±–æ—Ç–∞")
        bot.stop_polling()
        root.quit()
        root.destroy()
        sys.exit()

    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
    title_label = tk.Label(root, text="Telegram –ë–æ—Ç –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è", font=("Helvetica", 14), bg="#f0f0f0", fg="#007acc")
    title_label.pack(pady=10)

    tk.Button(root, text="–ó–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç–∞", command=start_bot, **button_style).pack(pady=5)
    tk.Button(root, text="–ó—É–ø–∏–Ω–∏—Ç–∏ –±–æ—Ç–∞", command=stop_bot, **button_style).pack(pady=5)

    powered_label = tk.Label(root, text="Powered by Kultup", bg="#f0f0f0", fg="#007acc", font=("Helvetica", 10, "italic"))
    powered_label.pack(side=tk.BOTTOM, pady=10)

    tk.Button(root, text="–í–∏—Ö—ñ–¥", command=stop_bot, **button_style).pack(pady=5)

    root.protocol("WM_DELETE_WINDOW", stop_bot)  # –û–±—Ä–æ–±–∫–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è –≤—ñ–∫–Ω–∞ —á–µ—Ä–µ–∑ —Ö—Ä–µ—Å—Ç–∏–∫

    root.mainloop()

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–∫–æ–Ω–∫–∏
def create_image():
    width = 64
    height = 64
    color1 = "black"
    color2 = "white"

    image = Image.new("RGB", (width, height), color1)
    dc = ImageDraw.Draw(image)
    dc.rectangle(
        (width // 2, 0, width, height // 2), fill=color2
    )
    dc.rectangle(
        (0, height // 2, width // 2, height), fill=color2
    )
    return image

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞ –∑ —Ç—Ä–µ—è
def start_bot_tray(icon, item):
    Thread(target=bot.polling).start()
    Thread(target=monitor_system).start()

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑—É–ø–∏–Ω–∫–∏ –±–æ—Ç–∞ —ñ –≤–∏—Ö–æ–¥—É –∑ –ø—Ä–æ–≥—Ä–∞–º–∏
def stop_bot_tray(icon, item):
    bot.stop_polling()
    icon.stop()
    sys.exit()

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–∫–æ–Ω–∫–∏ –≤ —Å–∏—Å—Ç–µ–º–Ω–æ–º—É —Ç—Ä–µ—ó
def setup_tray():
    icon = pystray.Icon("Telegram Bot", create_image(), "Telegram –ë–æ—Ç –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è", menu=pystray.Menu(
        pystray.MenuItem("–ó–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç–∞", start_bot_tray),
        pystray.MenuItem("–ó—É–ø–∏–Ω–∏—Ç–∏ –±–æ—Ç–∞", stop_bot_tray),
        pystray.MenuItem("–í–∏—Ö—ñ–¥", stop_bot_tray)
    ))
    icon.run()

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start
@bot.message_handler(commands=['start'])
def send_welcome(message):
    global last_message_id, last_chat_id
    last_chat_id = message.chat.id  # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–∞ —á–∞—Ç—É
    logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.username} ({message.from_user.id}) –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–≤ –∫–æ–º–∞–Ω–¥—É /start")
    
    welcome_message = (
        "–ü—Ä–∏–≤—ñ—Ç! –Ø –≤–∞—à –∞—Å–∏—Å—Ç–µ–Ω—Ç-–±–æ—Ç. –Ø –º–æ–∂—É –¥–æ–ø–æ–º–æ–≥—Ç–∏ –≤–∞–º –∑ —Ä—ñ–∑–Ω–∏–º–∏ –∑–∞–≤–¥–∞–Ω–Ω—è–º–∏, "
        "—Ç–∞–∫–∏–º–∏ —è–∫ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è –º—É–∑–∏–∫–∏, —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ–º–ø'—é—Ç–µ—Ä–æ–º —Ç–∞ –±–∞–≥–∞—Ç–æ —ñ–Ω—à–æ–≥–æ.\n"
        "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂—á–µ, —â–æ–± –ø–æ—á–∞—Ç–∏!"
    )
    
    bot.send_message(message.chat.id, welcome_message)
    bot.send_message(message.chat.id, "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=get_main_buttons())

# –ó–∞–ø—É—Å–∫ GUI —Ç–∞ Telegram –∫–ª—ñ—î–Ω—Ç–∞
if __name__ == "__main__":
    Thread(target=create_gui).start()
    setup_tray()
